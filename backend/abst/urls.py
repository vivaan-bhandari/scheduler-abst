"""
URL configuration for abst project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Import the include() function: from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.views.decorators.common import no_append_slash
from rest_framework.routers import DefaultRouter
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from django.core.management import call_command
from io import StringIO
from datetime import datetime
import logging
import traceback
from adls.views import ADLViewSet, WeeklyADLEntryViewSet, WeeklyADLSummaryViewSet
from residents.views import ResidentViewSet, FacilityViewSet, FacilitySectionViewSet
from users.views import UserViewSet, FacilityAccessViewSet
from scheduling.views import (
    StaffViewSet, ShiftTemplateViewSet, ShiftViewSet, StaffAssignmentViewSet,
    StaffAvailabilityViewSet, AIInsightViewSet, AIRecommendationViewSet,
    SchedulingDashboardViewSet, TimeTrackingViewSet, WeeklyHoursSummaryViewSet
)
try:
    from paycom.views import (
        PaycomEmployeeViewSet, PaycomSyncLogViewSet, PaycomFileViewSet, PaycomSyncViewSet
    )
    PAYCOM_AVAILABLE = True
except Exception as e:
    # If Paycom app is not available (e.g., migrations not run), disable Paycom URLs
    PAYCOM_AVAILABLE = False
    PaycomEmployeeViewSet = None
    PaycomSyncLogViewSet = None
    PaycomFileViewSet = None
    PaycomSyncViewSet = None

router = DefaultRouter()
router.register(r'adls', ADLViewSet)
router.register(r'weekly-adls', WeeklyADLEntryViewSet)
router.register(r'weekly-adl-summaries', WeeklyADLSummaryViewSet)
router.register(r'residents', ResidentViewSet)
router.register(r'users', UserViewSet)
router.register(r'facilities', FacilityViewSet)
router.register(r'facilitysections', FacilitySectionViewSet)
router.register(r'facility-access', FacilityAccessViewSet, basename='facility-access')
router.register(r'scheduling/staff', StaffViewSet)
router.register(r'scheduling/shift-templates', ShiftTemplateViewSet)
router.register(r'scheduling/shifts', ShiftViewSet)
router.register(r'scheduling/assignments', StaffAssignmentViewSet)
router.register(r'scheduling/availability', StaffAvailabilityViewSet)
router.register(r'scheduling/ai-insights', AIInsightViewSet)
router.register(r'scheduling/ai-recommendations', AIRecommendationViewSet)
router.register(r'scheduling/dashboard', SchedulingDashboardViewSet, basename='scheduling-dashboard')
router.register(r'scheduling/time-tracking', TimeTrackingViewSet)
router.register(r'scheduling/weekly-hours-summary', WeeklyHoursSummaryViewSet)
if PAYCOM_AVAILABLE:
    router.register(r'paycom/employees', PaycomEmployeeViewSet, basename='paycom-employees')
    router.register(r'paycom/sync-logs', PaycomSyncLogViewSet, basename='paycom-sync-logs')
    router.register(r'paycom/files', PaycomFileViewSet, basename='paycom-files')
    router.register(r'paycom/sync', PaycomSyncViewSet, basename='paycom-sync')

@csrf_exempt
def healthcheck(request):
    # Simple healthcheck that bypasses all middleware
    return HttpResponse(
        'OK',
        content_type='text/plain',
        status=200
    )

@csrf_exempt
def root_ok(request):
    # Minimal root endpoint that just returns OK
    # This is used by Railway health checks
    return HttpResponse('OK', content_type='text/plain', status=200)

logger = logging.getLogger(__name__)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def run_migrations(request):
    """
    Standalone API endpoint to run migrations (always available, doesn't depend on Paycom imports)
    """
    try:
        logger.info("Running migrations via API endpoint")
        
        # Capture migration output
        output = StringIO()
        
        # Run migrations and capture output
        call_command('migrate', verbosity=2, stdout=output)
        migration_output = output.getvalue()
        logger.info(f"Migration output: {migration_output}")
        
        return JsonResponse({
            'status': 'success',
            'message': 'Migrations completed successfully',
            'output': migration_output,
            'timestamp': str(datetime.now())
        })
        
    except Exception as e:
        logger.error(f"Migration failed via API endpoint: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        return JsonResponse({
            'status': 'error',
            'message': f'Migration failed: {str(e)}',
            'error_details': str(e),
            'timestamp': str(datetime.now())
        }, status=500)

urlpatterns = [
    path("", root_ok, name="root_ok"),  # Minimal root endpoint for Railway
    path("admin/", admin.site.urls),
    path("api/", include(router.urls)),
    path("health/", healthcheck, name="healthcheck"),
    path("api/paycom/run-migrations/", run_migrations, name="run_migrations"),  # Always available, standalone endpoint
]
